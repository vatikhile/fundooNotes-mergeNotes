import * as ts from "typescript";
import { ControlFlowGraph } from "./cfg";
export declare class CfgBuilder {
    private end;
    private blocks;
    private breakables;
    build(statements: ts.NodeArray<ts.Statement>): ControlFlowGraph | undefined;
    private buildStatements(current, topDownStatements);
    private buildStatement(current, statement);
    private createNotLoopBreakable(breakTarget, label);
    private createLoopBreakable(breakTarget, continueTarget, loop);
    private static getLabel(statement);
    private buildContinueStatement(continueStatement);
    private buildBreakStatement(breakStatement);
    private buildLabeledStatement(current, labeledStatement);
    private buildDoStatement(current, doWhileLoop);
    private buildWhileStatement(current, whileLoop);
    private createWhileRootBlock(whileLoop, firstLoopStatementBlock, current);
    private buildForEachLoop(current, forEach);
    private buildForStatement(current, forLoop);
    private buildIfStatement(current, ifStatement);
    private buildSwitchStatement(current, switchStatement);
    private buildReturnStatement(returnStatement);
    private buildForInitializer(current, forInitializer);
    private buildVariableDeclarationList(current, variableDeclarations);
    private buildBindingName(current, bindingName);
    private buildBindingElement(current, bindingElement);
    private buildExpression(current, expression);
    private buildTagName(current, tagName);
    private buildJsxAttributes(current, jsxAttributes);
    private buildJsxChild(current, jsxChild);
    private buildBinaryExpression(current, expression);
    private buildObjectLiteralExpression(current, objectLiteral);
    private createBranchingBlock(branchingLabel, trueSuccessor, falseSuccessor);
    private createBlock();
    private createBlockPredecessorOf(successor);
    private forLoopLabel(forLoop);
    private forEachLoopLabel(forEachLoop);
}
