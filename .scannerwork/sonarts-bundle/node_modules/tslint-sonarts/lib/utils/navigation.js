"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarTS
 * Copyright (C) 2017-2017 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const ts = require("typescript");
const Kind = ts.SyntaxKind;
function keyword(node) {
    return node.getFirstToken();
}
exports.keyword = keyword;
function isAssignment(node) {
    return (!!node &&
        node.kind === ts.SyntaxKind.BinaryExpression &&
        node.operatorToken.kind === ts.SyntaxKind.EqualsToken);
}
exports.isAssignment = isAssignment;
function getIdentifier(node) {
    node = drillDownThroughParenthesis(node);
    if (node.kind === ts.SyntaxKind.Identifier)
        return node;
    return undefined;
}
exports.getIdentifier = getIdentifier;
function collectLeftHandIdentifiers(node) {
    const identifiers = [];
    const nonIdentifiers = [];
    collectIdentifiersAndNonIdentifiers(node);
    identifiers.reverse();
    nonIdentifiers.reverse();
    return { identifiers, nonIdentifiers };
    function collectIdentifiersAndNonIdentifiers(node) {
        node = drillDownThroughParenthesis(node);
        if (node.kind === ts.SyntaxKind.Identifier) {
            identifiers.push(node);
        }
        else if (node.kind === ts.SyntaxKind.ObjectLiteralExpression) {
            node.properties.forEach(property => {
                collectIdentifiersAndNonIdentifiers(property);
            });
        }
        else if (node.kind === ts.SyntaxKind.ArrayLiteralExpression) {
            node.elements.forEach(element => {
                collectIdentifiersAndNonIdentifiers(element);
            });
        }
        else if (is(node, ts.SyntaxKind.PropertyAssignment)) {
            collectIdentifiersAndNonIdentifiers(node.initializer);
        }
        else if (is(node, ts.SyntaxKind.ShorthandPropertyAssignment)) {
            const propertyAssignment = node;
            collectIdentifiersAndNonIdentifiers(propertyAssignment.name);
            if (propertyAssignment.objectAssignmentInitializer) {
                nonIdentifiers.push(propertyAssignment.objectAssignmentInitializer);
            }
        }
        else if (is(node, ts.SyntaxKind.SpreadAssignment, ts.SyntaxKind.SpreadElement)) {
            collectIdentifiersAndNonIdentifiers(node.expression);
        }
        else if (is(node, ts.SyntaxKind.BinaryExpression)) {
            collectIdentifiersAndNonIdentifiers(node.left);
            nonIdentifiers.push(node.right);
        }
        else {
            nonIdentifiers.push(node);
        }
    }
}
exports.collectLeftHandIdentifiers = collectLeftHandIdentifiers;
function getComments(node) {
    return [...getCommentsBefore(node), ...getCommentsAfter(node)];
}
exports.getComments = getComments;
function getCommentsBefore(node) {
    return ts.getLeadingCommentRanges(node.getSourceFile().text, node.getFullStart()) || [];
}
exports.getCommentsBefore = getCommentsBefore;
function getCommentsAfter(node) {
    return ts.getTrailingCommentRanges(node.getSourceFile().text, node.getEnd()) || [];
}
exports.getCommentsAfter = getCommentsAfter;
function getText(textRange, file) {
    return file.getFullText().substr(textRange.pos, textRange.end - textRange.pos);
}
exports.getText = getText;
function toTokens(node) {
    const result = [];
    const stack = [node];
    while (stack.length) {
        const currentNode = stack.pop();
        if (isToken(currentNode)) {
            result.push(currentNode);
            continue;
        }
        // skip jsDoc
        if (currentNode.kind === ts.SyntaxKind.FirstJSDocTagNode) {
            continue;
        }
        stack.push(...currentNode.getChildren());
    }
    return result.reverse();
}
exports.toTokens = toTokens;
function lineAndCharacter(pos, file) {
    return file.getLineAndCharacterOfPosition(pos);
}
exports.lineAndCharacter = lineAndCharacter;
function is(node, ...kinds) {
    if (!node)
        return false;
    for (const kind of kinds) {
        if (node.kind === kind) {
            return true;
        }
    }
    return false;
}
exports.is = is;
function isToken(node) {
    return node.kind <= ts.SyntaxKind.OfKeyword;
}
function localAncestorsChain(node) {
    return ancestorsChain(node, ...exports.FUNCTION_LIKE);
}
exports.localAncestorsChain = localAncestorsChain;
function ancestorsChain(node, ...boundary) {
    const chain = [];
    for (let parent = node.parent; !!parent; parent = parent.parent) {
        chain.push(parent);
        if (boundary.includes(parent.kind))
            break;
    }
    return chain;
}
exports.ancestorsChain = ancestorsChain;
function firstLocalAncestor(node, ...targetAncestor) {
    return firstAncestor(node, targetAncestor, ...exports.FUNCTION_LIKE);
}
exports.firstLocalAncestor = firstLocalAncestor;
function firstAncestor(node, targetAncestor, ...boundary) {
    return ancestorsChain(node, ...boundary).find(ancestor => targetAncestor.includes(ancestor.kind));
}
exports.firstAncestor = firstAncestor;
function floatToTopParenthesis(node) {
    if (is(node, ts.SyntaxKind.ParenthesizedExpression)) {
        if (node.parent)
            return floatToTopParenthesis(node.parent);
        return node;
    }
    return node;
}
exports.floatToTopParenthesis = floatToTopParenthesis;
function drillDownThroughParenthesis(node) {
    if (is(node, ts.SyntaxKind.ParenthesizedExpression))
        return drillDownThroughParenthesis(node.expression);
    return node;
}
exports.drillDownThroughParenthesis = drillDownThroughParenthesis;
function descendants(node) {
    const children = node.getChildren();
    let collectedDescendants = children;
    children.forEach(child => (collectedDescendants = collectedDescendants.concat(descendants(child))));
    return collectedDescendants;
}
exports.descendants = descendants;
function findChild(node, kind) {
    const child = node.getChildren().find(child => is(child, kind));
    if (child) {
        return child;
    }
    else {
        throw new Error("Not found child with kind " + ts.SyntaxKind[kind]);
    }
}
exports.findChild = findChild;
function accessModifier(declaration) {
    if (declaration.modifiers) {
        return declaration.modifiers.find(modifier => is(modifier, ...exports.ACCESS_MODIFIERS));
    }
    else {
        return;
    }
}
exports.accessModifier = accessModifier;
function isReadonly(declaration) {
    if (declaration.modifiers) {
        return declaration.modifiers.find(modifier => is(modifier, ts.SyntaxKind.ReadonlyKeyword));
    }
    else {
        return;
    }
}
exports.isReadonly = isReadonly;
function constructorOf(clazz) {
    return clazz.members.find(member => member.kind === ts.SyntaxKind.Constructor);
}
exports.constructorOf = constructorOf;
exports.FUNCTION_LIKE = [
    Kind.FunctionDeclaration,
    Kind.FunctionExpression,
    Kind.ArrowFunction,
    Kind.MethodDeclaration,
    Kind.Constructor,
    Kind.GetAccessor,
    Kind.SetAccessor,
];
exports.CONDITIONAL_STATEMENTS = [Kind.IfStatement, Kind.SwitchStatement];
exports.LOOP_STATEMENTS = [
    Kind.ForStatement,
    Kind.ForInStatement,
    Kind.ForOfStatement,
    Kind.WhileStatement,
    Kind.DoStatement,
];
exports.COMPOUND_ASSIGNMENTS = [
    Kind.PlusEqualsToken,
    Kind.MinusEqualsToken,
    Kind.AsteriskAsteriskEqualsToken,
    Kind.AsteriskEqualsToken,
    Kind.SlashEqualsToken,
    Kind.PercentEqualsToken,
    Kind.AmpersandEqualsToken,
    Kind.BarEqualsToken,
    Kind.CaretEqualsToken,
    Kind.LessThanLessThanEqualsToken,
    Kind.GreaterThanGreaterThanGreaterThanEqualsToken,
    Kind.GreaterThanGreaterThanEqualsToken,
];
exports.ACCESS_MODIFIERS = [Kind.PublicKeyword, Kind.PrivateKeyword, Kind.ProtectedKeyword];
//# sourceMappingURL=navigation.js.map