"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarTS
 * Copyright (C) 2017-2017 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const tslint = require("tslint");
const ts = require("typescript");
const builder_1 = require("../symbols/builder");
const lva_1 = require("../symbols/lva");
const table_1 = require("../symbols/table");
const navigation_1 = require("../utils/navigation");
class Rule extends tslint.Rules.TypedRule {
    static formatMessage(deadIdentifier) {
        return `Remove this useless assignment to local variable "${deadIdentifier.getText()}".`;
    }
    applyWithProgram(sourceFile, program) {
        const symbols = builder_1.SymbolTableBuilder.build(sourceFile, program);
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program, symbols));
    }
}
Rule.metadata = {
    description: "Dead stores should be removed",
    options: null,
    optionsDescription: "",
    rationale: tslint.Utils.dedent `
      A dead store happens when a local variable is assigned a value that is not read by
      any subsequent instruction or when an object property is assigned a value that is not subsequently used.
      Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code.
      Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.`,
    rspecKey: "RSPEC-1854",
    ruleName: "no-dead-store",
    type: "functionality",
    typescriptOnly: false,
};
Rule.BASIC_VALUES = ["0", "1", '""', "''"];
exports.Rule = Rule;
class Walker extends tslint.ProgramAwareRuleWalker {
    constructor(sourceFile, options, program, symbols) {
        super(sourceFile, options, program);
        this.symbols = symbols;
    }
    visitNode(node) {
        if (navigation_1.is(node, ...navigation_1.FUNCTION_LIKE)) {
            const functionLike = node;
            new lva_1.LiveVariableAnalyzer(this.symbols).analyze(functionLike);
            navigation_1.descendants(node)
                .filter(descendant => navigation_1.is(descendant, ts.SyntaxKind.Identifier))
                .forEach(descendant => {
                const identifier = descendant;
                const usage = this.symbols.getUsage(identifier);
                if (usage && usage.dead && !this.isException(usage)) {
                    this.addFailureAtNode(identifier, Rule.formatMessage(identifier));
                }
            });
        }
        super.visitNode(node);
    }
    isException(usage) {
        if (!this.symbols.allUsages(usage.symbol).some(u => (u.flags & table_1.UsageFlag.DECLARATION) > 0))
            return true;
        const parent = navigation_1.floatToTopParenthesis(usage.node).parent;
        if (navigation_1.is(parent, ts.SyntaxKind.BindingElement, ts.SyntaxKind.VariableDeclaration)) {
            return isBasicValue(parent.initializer);
        }
        return false;
    }
}
function isBasicValue(expression) {
    if (!expression)
        return false;
    if (navigation_1.is(expression, ts.SyntaxKind.TrueKeyword, ts.SyntaxKind.FalseKeyword, ts.SyntaxKind.NullKeyword))
        return true;
    if (navigation_1.is(expression, ts.SyntaxKind.NumericLiteral, ts.SyntaxKind.StringLiteral))
        return Rule.BASIC_VALUES.includes(expression.getText());
    if (navigation_1.is(expression, ts.SyntaxKind.PrefixUnaryExpression)) {
        const unary = expression;
        if (unary.operator === ts.SyntaxKind.MinusToken)
            return isBasicValue(unary.operand);
        return false;
    }
    if (navigation_1.is(expression, ts.SyntaxKind.ArrayLiteralExpression))
        return expression.elements.length === 0;
    if (navigation_1.is(expression, ts.SyntaxKind.ObjectLiteralExpression))
        return expression.properties.length === 0;
    return false;
}
//# sourceMappingURL=noDeadStoreRule.js.map