"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarTS
 * Copyright (C) 2017-2017 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const tslint = require("tslint");
const ts = require("typescript");
const areEquivalent_1 = require("../utils/areEquivalent");
const navigation_1 = require("../utils/navigation");
class Rule extends tslint.Rules.AbstractRule {
    apply(sourceFile) {
        const walker = new Walker(sourceFile, this.getOptions());
        this.applyWithWalker(walker);
        const functionBlocks = walker.functionBlocks;
        if (functionBlocks.length < 2) {
            return [];
        }
        for (let i = 1; i < functionBlocks.length; i++) {
            const duplicatingFunctionBlock = functionBlocks[i];
            for (let j = 0; j < i; j++) {
                const originalFunctionBlock = functionBlocks[j];
                if (areEquivalent_1.default(duplicatingFunctionBlock, originalFunctionBlock)) {
                    walker.addFailureAtNode(Rule.issueNode(duplicatingFunctionBlock.parent), Rule.message(originalFunctionBlock));
                    break;
                }
            }
        }
        return walker.getFailures();
    }
    static message(functionBlock) {
        const lineOfOriginalFunction = navigation_1.lineAndCharacter(functionBlock.parent.getStart(), functionBlock.getSourceFile()).line + 1;
        return `Update this function so that its implementation is not identical to the one on line ${lineOfOriginalFunction}.`;
    }
    static issueNode(functionNode) {
        if (navigation_1.is(functionNode, ts.SyntaxKind.FunctionExpression, ts.SyntaxKind.FunctionDeclaration)) {
            return navigation_1.findChild(functionNode, ts.SyntaxKind.FunctionKeyword);
        }
        if (navigation_1.is(functionNode, ts.SyntaxKind.MethodDeclaration, ts.SyntaxKind.GetAccessor, ts.SyntaxKind.SetAccessor)) {
            return navigation_1.findChild(functionNode, ts.SyntaxKind.Identifier);
        }
        if (navigation_1.is(functionNode, ts.SyntaxKind.Constructor)) {
            return navigation_1.findChild(functionNode, ts.SyntaxKind.ConstructorKeyword);
        }
        if (navigation_1.is(functionNode, ts.SyntaxKind.ArrowFunction)) {
            return functionNode.equalsGreaterThanToken;
        }
        throw new Error("Unknow function kind " + ts.SyntaxKind[functionNode.kind]);
    }
}
Rule.metadata = {
    ruleName: "no-identical-functions",
    description: "",
    optionsDescription: "",
    options: null,
    rspecKey: "RSPEC-4144",
    type: "maintainability",
    typescriptOnly: false,
};
exports.Rule = Rule;
class Walker extends tslint.RuleWalker {
    constructor() {
        super(...arguments);
        this.functionBlocks = [];
    }
    visitNode(node) {
        if (navigation_1.is(node, ...navigation_1.FUNCTION_LIKE)) {
            const body = node.body;
            if (navigation_1.is(body, ts.SyntaxKind.Block) && Walker.isBigEnough(body)) {
                this.functionBlocks.push(body);
            }
        }
        super.visitNode(node);
    }
    static isBigEnough(block) {
        if (block.statements.length > 0) {
            const firstLine = navigation_1.lineAndCharacter(block.statements[0].getStart(), block.getSourceFile()).line;
            const lastLine = navigation_1.lineAndCharacter(block.statements[block.statements.length - 1].getEnd(), block.getSourceFile())
                .line;
            return lastLine - firstLine > 1;
        }
        return false;
    }
}
//# sourceMappingURL=noIdenticalFunctionsRule.js.map