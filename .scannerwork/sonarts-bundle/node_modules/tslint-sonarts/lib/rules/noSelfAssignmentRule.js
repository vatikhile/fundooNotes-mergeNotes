"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarTS
 * Copyright (C) 2017-2017 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const tslint = require("tslint");
const ts = require("typescript");
class Rule extends tslint.Rules.TypedRule {
    static formatMessage() {
        return "Remove or correct this useless self-assignment.";
    }
    applyWithProgram(sourceFile, program) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program));
    }
}
Rule.metadata = {
    ruleName: "no-self-assignment",
    description: "Variables should not be self-assigned",
    rationale: tslint.Utils.dedent `
      There is no reason to re-assign a variable to itself. Either this statement is redundant and
      should be removed, or the re-assignment is a mistake and some other value or variable was
      intended for the assignment instead.`,
    optionsDescription: "",
    options: null,
    rspecKey: "RSPEC-1656",
    type: "functionality",
    typescriptOnly: false,
};
exports.Rule = Rule;
class Walker extends tslint.ProgramAwareRuleWalker {
    visitBinaryExpression(expression) {
        if (this.isAssignment(expression) && this.isIdentifier(expression.left)) {
            if (this.isIdentifier(expression.right) && expression.left.text === expression.right.text) {
                this.addFailureAtNode(expression, Rule.formatMessage());
            }
            if (this.isArrayReverseAssignment(expression.left, expression.right)) {
                // a = a.reverse()
                this.addFailureAtNode(expression, Rule.formatMessage());
            }
        }
        super.visitBinaryExpression(expression);
    }
    isAssignment(expression) {
        return expression.operatorToken.kind === ts.SyntaxKind.EqualsToken;
    }
    isIdentifier(expression) {
        return expression.kind === ts.SyntaxKind.Identifier;
    }
    isArrayReverseAssignment(left, right) {
        // in case of `a = a.reverse()`, left is `a` and right is `a.reverse()`
        return (this.isCallExpression(right) &&
            this.isPropertyAccessExpression(right.expression) &&
            this.isIdentifier(right.expression.expression) &&
            this.isArray(right.expression.expression) &&
            right.expression.name.text === "reverse" &&
            right.expression.expression.text === left.text);
    }
    isCallExpression(expression) {
        return expression.kind === ts.SyntaxKind.CallExpression;
    }
    isPropertyAccessExpression(expression) {
        return expression.kind === ts.SyntaxKind.PropertyAccessExpression;
    }
    isArray(node) {
        const type = this.getTypeChecker().getTypeAtLocation(node);
        return !!type.symbol && type.symbol.name === "Array";
    }
}
//# sourceMappingURL=noSelfAssignmentRule.js.map